<!doctype html>
<html lang=en>
  <head>
    <title>pdf2image.exceptions.PDFInfoNotInstalledError: Unable to get page count. Is poppler installed and in PATH?
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "Mbst7KaQzxktMBmYl3Kk";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>PDFInfoNotInstalledError</h1>
<div class="detail">
  <p class="errormsg">pdf2image.exceptions.PDFInfoNotInstalledError: Unable to get page count. Is poppler installed and in PATH?
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-4811276784">
  <h4>File <cite class="filename">"/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/pdf2image/pdf2image.py"</cite>,
      line <em class="line">581</em>,
      in <code class="function">pdfinfo_from_path</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span># Add poppler path to LD_LIBRARY_PATH</pre>
<pre class="line before"><span class="ws">        </span>env = os.environ.copy()</pre>
<pre class="line before"><span class="ws">        </span>if poppler_path is not None:</pre>
<pre class="line before"><span class="ws">            </span>env[&#34;LD_LIBRARY_PATH&#34;] = poppler_path + &#34;:&#34; + env.get(&#34;LD_LIBRARY_PATH&#34;, &#34;&#34;)</pre>
<pre class="line current"><span class="ws">        </span>proc = Popen(command, env=env, stdout=PIPE, stderr=PIPE)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>try:</pre>
<pre class="line after"><span class="ws">            </span>out, err = proc.communicate(timeout=timeout)</pre>
<pre class="line after"><span class="ws">        </span>except TimeoutExpired:</pre>
<pre class="line after"><span class="ws">            </span>proc.kill()</pre></div>
</div>

<li><div class="frame" id="frame-4811276928">
  <h4>File <cite class="filename">"/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/subprocess.py"</cite>,
      line <em class="line">1022</em>,
      in <code class="function">__init__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                </span>self.stderr = io.open(errread, &#39;rb&#39;, bufsize)</pre>
<pre class="line before"><span class="ws">                </span>if self.text_mode:</pre>
<pre class="line before"><span class="ws">                    </span>self.stderr = io.TextIOWrapper(self.stderr,</pre>
<pre class="line before"><span class="ws">                            </span>encoding=encoding, errors=errors)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">            </span>self._execute_child(args, executable, preexec_fn, close_fds,
<span class="ws">            </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">                                </span>pass_fds, cwd, env,</pre>
<pre class="line after"><span class="ws">                                </span>startupinfo, creationflags, shell,</pre>
<pre class="line after"><span class="ws">                                </span>p2cread, p2cwrite,</pre>
<pre class="line after"><span class="ws">                                </span>c2pread, c2pwrite,</pre>
<pre class="line after"><span class="ws">                                </span>errread, errwrite,</pre></div>
</div>

<li><div class="frame" id="frame-4811282688">
  <h4>File <cite class="filename">"/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/subprocess.py"</cite>,
      line <em class="line">1899</em>,
      in <code class="function">_execute_child</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                        </span>err_filename = cwd</pre>
<pre class="line before"><span class="ws">                    </span>else:</pre>
<pre class="line before"><span class="ws">                        </span>err_filename = orig_executable</pre>
<pre class="line before"><span class="ws">                    </span>if errno_num != 0:</pre>
<pre class="line before"><span class="ws">                        </span>err_msg = os.strerror(errno_num)</pre>
<pre class="line current"><span class="ws">                    </span>raise child_exception_type(errno_num, err_msg, err_filename)
<span class="ws">                    </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">                </span>raise child_exception_type(err_msg)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>def _handle_exitstatus(self, sts,</pre>
<pre class="line after"><span class="ws">                               </span>_waitstatus_to_exitcode=_waitstatus_to_exitcode,</pre></div>
</div>

<li><div class="exc-divider">During handling of the above exception, another exception occurred:</div>
<li><div class="frame" id="frame-4809445664">
  <h4>File <cite class="filename">"/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/flask/app.py"</cite>,
      line <em class="line">1498</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-4809450272">
  <h4>File <cite class="filename">"/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/flask/app.py"</cite>,
      line <em class="line">1476</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-4809450416">
  <h4>File <cite class="filename">"/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/flask/app.py"</cite>,
      line <em class="line">1473</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-4809450560">
  <h4>File <cite class="filename">"/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/flask/app.py"</cite>,
      line <em class="line">882</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-4809450704">
  <h4>File <cite class="filename">"/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/flask/app.py"</cite>,
      line <em class="line">880</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-4809450848">
  <h4>File <cite class="filename">"/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/flask/app.py"</cite>,
      line <em class="line">865</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-4809450992">
  <h4>File <cite class="filename">"/Users/will/Projects/Notex/notex/app.py"</cite>,
      line <em class="line">42</em>,
      in <code class="function">upload_file</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>conv = Conversation(session_id=project_id, output_dir=project_folder)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>if &#39;pdf&#39; in file_type:</pre>
<pre class="line before"><span class="ws">        </span>pdf_path = os.path.join(project_folder, &#34;input.pdf&#34;)</pre>
<pre class="line before"><span class="ws">        </span>file.save(pdf_path)</pre>
<pre class="line current"><span class="ws">        </span>pdf_output_path = conv.process_pdf(pdf_path)
<span class="ws">        </span>                  ^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>elif &#39;image&#39; in file_type:</pre>
<pre class="line after"><span class="ws">        </span>image_path = os.path.join(project_folder, &#34;input.png&#34;)</pre>
<pre class="line after"><span class="ws">        </span>file.save(image_path)</pre>
<pre class="line after"><span class="ws">        </span>latex_code = conv.process_images([image_path])</pre>
<pre class="line after"><span class="ws">        </span>cleaned_latex_code = conv.clean_latex_code(latex_code)</pre></div>
</div>

<li><div class="frame" id="frame-4809451136">
  <h4>File <cite class="filename">"/Users/will/Projects/Notex/notex/src/Conversation.py"</cite>,
      line <em class="line">191</em>,
      in <code class="function">process_pdf</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">            </span>logger.error(f&#34;An unexpected error occurred during LaTeX compilation: {e}&#34;)</pre>
<pre class="line before"><span class="ws">            </span>raise</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def process_pdf(self, pdf_path: str) -&gt; str:</pre>
<pre class="line current"><span class="ws">        </span>pages = convert_from_path(pdf_path, output_folder=self.output_dir)
<span class="ws">        </span>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>image_paths = []</pre>
<pre class="line after"><span class="ws">        </span>for i, page in enumerate(tqdm(pages, desc=&#34;Converting PDF pages to images&#34;)):</pre>
<pre class="line after"><span class="ws">            </span>image_path = os.path.join(self.images_dir, f&#34;temp_page_{i}.png&#34;)</pre>
<pre class="line after"><span class="ws">            </span>page.save(image_path, &#34;PNG&#34;)</pre>
<pre class="line after"><span class="ws">            </span>preprocessed_image_path = self.preprocess_image(image_path)</pre></div>
</div>

<li><div class="frame" id="frame-4809454160">
  <h4>File <cite class="filename">"/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/pdf2image/pdf2image.py"</cite>,
      line <em class="line">127</em>,
      in <code class="function">convert_from_path</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>output_folder = output_folder.as_posix()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>if isinstance(poppler_path, PurePath):</pre>
<pre class="line before"><span class="ws">        </span>poppler_path = poppler_path.as_posix()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">    </span>page_count = pdfinfo_from_path(
<span class="ws">    </span>             </pre>
<pre class="line after"><span class="ws">        </span>pdf_path, userpw, ownerpw, poppler_path=poppler_path</pre>
<pre class="line after"><span class="ws">    </span>)[&#34;Pages&#34;]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span># We start by getting the output format, the buffer processing function and if we need pdftocairo</pre>
<pre class="line after"><span class="ws">    </span>parsed_fmt, final_extension, parse_buffer_func, use_pdfcairo_format = _parse_format(</pre></div>
</div>

<li><div class="frame" id="frame-4811276640">
  <h4>File <cite class="filename">"/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/pdf2image/pdf2image.py"</cite>,
      line <em class="line">607</em>,
      in <code class="function">pdfinfo_from_path</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>raise ValueError</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>return d</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>except OSError:</pre>
<pre class="line current"><span class="ws">        </span>raise PDFInfoNotInstalledError(
<span class="ws">        </span>^</pre>
<pre class="line after"><span class="ws">            </span>&#34;Unable to get page count. Is poppler installed and in PATH?&#34;</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws">    </span>except ValueError:</pre>
<pre class="line after"><span class="ws">        </span>raise PDFPageCountError(</pre>
<pre class="line after"><span class="ws">            </span>f&#34;Unable to get page count.\n{err.decode(&#39;utf8&#39;, &#39;ignore&#39;)}&#34;</pre></div>
</div>
</ul>
  <blockquote>pdf2image.exceptions.PDFInfoNotInstalledError: Unable to get page count. Is poppler installed and in PATH?
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/pdf2image/pdf2image.py&#34;, line 581, in pdfinfo_from_path
    proc = Popen(command, env=env, stdout=PIPE, stderr=PIPE)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/subprocess.py&#34;, line 1022, in __init__
    self._execute_child(args, executable, preexec_fn, close_fds,
  File &#34;/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/subprocess.py&#34;, line 1899, in _execute_child
    raise child_exception_type(errno_num, err_msg, err_filename)
FileNotFoundError: [Errno 2] No such file or directory: &#39;pdfinfo&#39;

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &#34;/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/flask/app.py&#34;, line 1498, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/flask/app.py&#34;, line 1476, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/flask/app.py&#34;, line 1473, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/flask/app.py&#34;, line 882, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/flask/app.py&#34;, line 880, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/flask/app.py&#34;, line 865, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;/Users/will/Projects/Notex/notex/app.py&#34;, line 42, in upload_file
    pdf_output_path = conv.process_pdf(pdf_path)
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;/Users/will/Projects/Notex/notex/src/Conversation.py&#34;, line 191, in process_pdf
    pages = convert_from_path(pdf_path, output_folder=self.output_dir)
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/pdf2image/pdf2image.py&#34;, line 127, in convert_from_path
    page_count = pdfinfo_from_path(
                 ^^^^^^^^^^^^^^^^^^
  File &#34;/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/pdf2image/pdf2image.py&#34;, line 607, in pdfinfo_from_path
    raise PDFInfoNotInstalledError(
pdf2image.exceptions.PDFInfoNotInstalledError: Unable to get page count. Is poppler installed and in PATH?
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/pdf2image/pdf2image.py", line 581, in pdfinfo_from_path
    proc = Popen(command, env=env, stdout=PIPE, stderr=PIPE)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/subprocess.py", line 1022, in __init__
    self._execute_child(args, executable, preexec_fn, close_fds,
  File "/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/subprocess.py", line 1899, in _execute_child
    raise child_exception_type(errno_num, err_msg, err_filename)
FileNotFoundError: [Errno 2] No such file or directory: 'pdfinfo'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/flask/app.py", line 1498, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/flask/app.py", line 1476, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/flask/app.py", line 1473, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/flask/app.py", line 882, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/flask/app.py", line 880, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/flask/app.py", line 865, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/will/Projects/Notex/notex/app.py", line 42, in upload_file
    pdf_output_path = conv.process_pdf(pdf_path)
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/will/Projects/Notex/notex/src/Conversation.py", line 191, in process_pdf
    pages = convert_from_path(pdf_path, output_folder=self.output_dir)
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/pdf2image/pdf2image.py", line 127, in convert_from_path
    page_count = pdfinfo_from_path(
                 ^^^^^^^^^^^^^^^^^^
  File "/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/pdf2image/pdf2image.py", line 607, in pdfinfo_from_path
    raise PDFInfoNotInstalledError(
pdf2image.exceptions.PDFInfoNotInstalledError: Unable to get page count. Is poppler installed and in PATH?


-->
